from astropy.coordinates import SkyCoord
import astropy.units as u

import sunpy
from sunpy.coordinates import frames
from sunpy.coordinates.sun import _radius_from_angular_radius
from sunpy.map.header_helper import make_fitswcs_header

import matplotlib.pyplot as plt

import pickle

def make_synthetic_map(self, **kwargs):
    """
    Creates a synthetic map object that can be loaded/edited with sunpy
    :return:
    """
    data = self['image']

    # Define header parameters for the synthetic image

    # Coordinates can be passed from sunpy maps that comparisons are made width
    reference_coord = kwargs.get('reference_coord', SkyCoord(0 * u.arcsec, 0 * u.arcsec,
                                                                  obstime='2013-10-28',
                                                                  observer='earth',  # Temporarily 1 AU away
                                                                  frame=frames.Helioprojective))

    reference_pixel = kwargs.get('reference_pixel', u.Quantity([(data.shape[1] - 1) / 2.,
                                                                     (data.shape[0] - 1) / 2.],
                                                                    u.pixel))  # Reference pixel along each axis: Defaults to the center of data array

    asec2cm = _radius_from_angular_radius(1. * u.arcsec, 1 * u.AU).to(u.cm)  # centimeters per arcsecond at 1 AU
    resolution = self['plotSetting_resolution']
    domain_size = self['domainWidth_max']
    len_asec = (domain_size / asec2cm).value
    scale_ = [len_asec / resolution, len_asec / resolution]

    scale = kwargs.get('scale', u.Quantity(scale_, u.arcsec / u.pixel))
    telescope = kwargs.get('telescope', 'EIT')
    observatory = kwargs.get('observatory', 'SOHO')
    detector = kwargs.get('detector', 'Synthetic')
    instrument = kwargs.get('instrument', None)
    if isinstance(self['channel'], int):
        wavelength = int(self['channel']) * u.angstrom
    else:
        wavelength = None
    exposure = kwargs.get('exposure', None)
    unit = kwargs.get('unit', None)

    # Creating header using sunpy
    header = make_fitswcs_header(data,
                                 coordinate=reference_coord,
                                 reference_pixel=reference_pixel,
                                 scale=scale,
                                 telescope=telescope,
                                 detector=detector,
                                 instrument=instrument,
                                 observatory=observatory,
                                 wavelength=wavelength,
                                 exposure=exposure,
                                 unit=unit)

    synth_map = sunpy.map.Map(data, header)
    return synth_map

maps = []
dirname = '/home/saber/CoronalLoopBuilder/examples/testing/'
mapdirs171 = ['maps/0_AIA-STEREOA_171_2012.pkl', 'maps/1_AIA-STEREOA_171_2012.pkl']
mapdirs195 = ['maps/0_AIA-STEREOA_195_2012.pkl', 'maps/1_AIA-STEREOA_195_2012.pkl']
mapdirs304 = ['maps/0_AIA-STEREOA_304_2012.pkl', 'maps/1_AIA-STEREOA_304_2012.pkl']

for name in mapdirs304:
    with open(dirname+name, 'rb') as f:
        maps.append(pickle.load(f))
        f.close()

maps[0] = maps[1]

# https://docs.sunpy.org/en/latest/generated/api/sunpy.map.GenericMap.html
image = maps[0].data            # Projection Data (should be from yt object)

res = 512               # Manually set Sampling resolution (should be autogenerated)
domainWidth_max = 1024  # (should be taken from yt dataset)
channel = int(maps[0].wavelength.value)
# reference_coord = None

reference_coord = maps[0].reference_coordinate
reference_pixel = u.Quantity([maps[0].reference_pixel[0].value,
                                  maps[0].reference_pixel[1].value], u.pixel)
scale = [maps[0].scale.axis1, maps[0].scale.axis2]*(u.arcsec/u.pixel)
telescope = None    # Telescope redundant with Observatory and Instrument
observatory = maps[0].observatory
detector = maps[0].detector
instrument = maps[0].instrument
exposure = maps[0].exposure_time
unit = None         # Unit possibly redundant - can be inferred

self = {'image': image,
        'plotSetting_resolution': res,
        'domainWidth_max': domainWidth_max,
        'channel': channel,
        'reference_coord': reference_coord}

kgs = {'reference_coord': reference_coord,
       'reference_pixel': reference_pixel,
       'scale': scale,
       'telescope': telescope,
       'observatory': observatory,
       'detector': detector,
       'instrument': instrument,
       'exposure': exposure,
       'unit': unit}

synthMap = make_synthetic_map(self, **kgs)

synthMap.plot(cmap='Greys')
plt.show()
plt.close()
